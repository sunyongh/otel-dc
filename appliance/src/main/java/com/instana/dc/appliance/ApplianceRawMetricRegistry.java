/*
 * (c) Copyright IBM Corp. 2023
 * (c) Copyright Instana Inc.
 */
package com.instana.dc.appliance;

import com.instana.dc.RawMetric;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import static com.instana.dc.InstrumentType.*;
import static com.instana.dc.appliance.ApplianceDcUtil.*;

public class ApplianceRawMetricRegistry {
    /* The purpose to set special meter name for metrics is to comply with the "hostmetrics" receiver of
     * OpenTelemetry Contrib Collector.
     **/
    private final Map<String, RawMetric> map = new ConcurrentHashMap<String, RawMetric>() {{
        put(SYSTEM_CPU_TIME_NAME, new RawMetric(COUNTER, SYSTEM_CPU_TIME_NAME, SYSTEM_CPU_TIME_DESC, SYSTEM_CPU_TIME_UNIT, false, "cpu:state", MeterName.CPU));
        put(SYSTEM_CPU_LOAD1_NAME, new RawMetric(GAUGE, SYSTEM_CPU_LOAD1_NAME, SYSTEM_CPU_LOAD1_DESC, SYSTEM_CPU_LOAD1_UNIT, false, null, MeterName.LOAD));
        put(SYSTEM_CPU_LOAD5_NAME, new RawMetric(GAUGE, SYSTEM_CPU_LOAD5_NAME, SYSTEM_CPU_LOAD5_DESC, SYSTEM_CPU_LOAD5_UNIT, false, null, MeterName.LOAD));
        put(SYSTEM_CPU_LOAD15_NAME, new RawMetric(GAUGE, SYSTEM_CPU_LOAD15_NAME, SYSTEM_CPU_LOAD15_DESC, SYSTEM_CPU_LOAD15_UNIT, false, null, MeterName.LOAD));

        put(SYSTEM_MEMORY_USAGE_NAME, new RawMetric(UPDOWN_COUNTER, SYSTEM_MEMORY_USAGE_NAME, SYSTEM_MEMORY_USAGE_DESC, SYSTEM_MEMORY_USAGE_UNIT, true, "state", MeterName.MEMORY));

        put(SYSTEM_NETWORK_CONNECTIONS_NAME, new RawMetric(UPDOWN_COUNTER, SYSTEM_NETWORK_CONNECTIONS_NAME, SYSTEM_NETWORK_CONNECTIONS_DESC, SYSTEM_NETWORK_CONNECTIONS_UNIT, true, "protocol:state", MeterName.NETWORK));
        put(SYSTEM_NETWORK_DROPPED_NAME, new RawMetric(COUNTER, SYSTEM_NETWORK_DROPPED_NAME, SYSTEM_NETWORK_DROPPED_DESC, SYSTEM_NETWORK_DROPPED_UNIT, true, "device:direction", MeterName.NETWORK));
        put(SYSTEM_NETWORK_ERRORS_NAME, new RawMetric(COUNTER, SYSTEM_NETWORK_ERRORS_NAME, SYSTEM_NETWORK_ERRORS_DESC, SYSTEM_NETWORK_ERRORS_UNIT, true, "device:direction", MeterName.NETWORK));
        put(SYSTEM_NETWORK_IO_NAME, new RawMetric(COUNTER, SYSTEM_NETWORK_IO_NAME, SYSTEM_NETWORK_IO_DESC, SYSTEM_NETWORK_IO_UNIT, true, "device:direction", MeterName.NETWORK));
        put(SYSTEM_NETWORK_PACKETS_NAME, new RawMetric(COUNTER, SYSTEM_NETWORK_PACKETS_NAME, SYSTEM_NETWORK_PACKETS_DESC, SYSTEM_NETWORK_PACKETS_UNIT, true, "device:direction", MeterName.NETWORK));

        put(SYSTEM_DISK_IO_NAME, new RawMetric(COUNTER, SYSTEM_DISK_IO_NAME, SYSTEM_DISK_IO_DESC, SYSTEM_DISK_IO_UNIT, true, "device:direction", MeterName.DISK));
        put(SYSTEM_DISK_IO_TIME_NAME, new RawMetric(COUNTER, SYSTEM_DISK_IO_TIME_NAME, SYSTEM_DISK_IO_TIME_DESC, SYSTEM_DISK_IO_TIME_UNIT, false, "device", MeterName.DISK));
        put(SYSTEM_DISK_MERGED_NAME, new RawMetric(COUNTER, SYSTEM_DISK_MERGED_NAME, SYSTEM_DISK_MERGED_DESC, SYSTEM_DISK_MERGED_UNIT, true, "device:direction", MeterName.DISK));
        put(SYSTEM_DISK_OPERATION_TIME_NAME, new RawMetric(COUNTER, SYSTEM_DISK_OPERATION_TIME_NAME, SYSTEM_DISK_OPERATION_TIME_DESC, SYSTEM_DISK_OPERATION_TIME_UNIT, false, "device:direction", MeterName.DISK));
        put(SYSTEM_DISK_OPERATIONS_NAME, new RawMetric(COUNTER, SYSTEM_DISK_OPERATIONS_NAME, SYSTEM_DISK_OPERATIONS_DESC, SYSTEM_DISK_OPERATIONS_UNIT, true, "device:direction", MeterName.DISK));
        put(SYSTEM_DISK_PENDING_OPERATIONS_NAME, new RawMetric(UPDOWN_COUNTER, SYSTEM_DISK_PENDING_OPERATIONS_NAME, SYSTEM_DISK_PENDING_OPERATIONS_DESC, SYSTEM_DISK_PENDING_OPERATIONS_UNIT, true, "device", MeterName.DISK));
        put(SYSTEM_DISK_WEIGHTED_IO_TIME_NAME, new RawMetric(COUNTER, SYSTEM_DISK_WEIGHTED_IO_TIME_NAME, SYSTEM_DISK_WEIGHTED_IO_TIME_DESC, SYSTEM_DISK_WEIGHTED_IO_TIME_UNIT, false, "device", MeterName.DISK));

        put(SYSTEM_FILESYSTEM_INODES_USAGE_NAME, new RawMetric(UPDOWN_COUNTER, SYSTEM_FILESYSTEM_INODES_USAGE_NAME, SYSTEM_FILESYSTEM_INODES_USAGE_DESC, SYSTEM_FILESYSTEM_INODES_USAGE_UNIT, true, "device", MeterName.FILESYSTEM));
        put(SYSTEM_FILESYSTEM_USAGE_NAME, new RawMetric(UPDOWN_COUNTER, SYSTEM_FILESYSTEM_USAGE_NAME, SYSTEM_FILESYSTEM_USAGE_DESC, SYSTEM_FILESYSTEM_USAGE_UNIT, true, "device", MeterName.FILESYSTEM));

        put(SYSTEM_PAGING_FAULTS_NAME, new RawMetric(COUNTER, SYSTEM_PAGING_FAULTS_NAME, SYSTEM_PAGING_FAULTS_DESC, SYSTEM_PAGING_FAULTS_UNIT, true, "type", MeterName.PAGING));
        put(SYSTEM_PAGING_OPERATIONS_NAME, new RawMetric(COUNTER, SYSTEM_PAGING_OPERATIONS_NAME, SYSTEM_PAGING_OPERATIONS_DESC, SYSTEM_PAGING_OPERATIONS_UNIT, true, "direction:type", MeterName.PAGING));
        put(SYSTEM_PAGING_USAGE_NAME, new RawMetric(UPDOWN_COUNTER, SYSTEM_PAGING_USAGE_NAME, SYSTEM_PAGING_USAGE_DESC, SYSTEM_PAGING_USAGE_UNIT, true, "device:state", MeterName.PAGING));

        put(SYSTEM_PROCESSES_COUNT_NAME, new RawMetric(UPDOWN_COUNTER, SYSTEM_PROCESSES_COUNT_NAME, SYSTEM_PROCESSES_COUNT_DESC, SYSTEM_PROCESSES_COUNT_UNIT, true, "status", MeterName.PROCESSES));
        put(SYSTEM_PROCESSES_CREATED_NAME, new RawMetric(COUNTER, SYSTEM_PROCESSES_CREATED_NAME, SYSTEM_PROCESSES_CREATED_DESC, SYSTEM_PROCESSES_CREATED_UNIT, true, null, MeterName.PROCESSES));

        put(SYSTEM_IBMQMGR_STATUS_NAME, new RawMetric(GAUGE, SYSTEM_IBMQMGR_STATUS_NAME, SYSTEM_IBMQMGR_STATUS_DESC, SYSTEM_IBMQMGR_STATUS_UNIT, true, "qmgr", MeterName.IBMQMGR));
    }};

    public Map<String, RawMetric> getMap() {
        return map;
    }
}
